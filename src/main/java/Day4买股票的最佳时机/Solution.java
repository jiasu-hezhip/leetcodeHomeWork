package Day4买股票的最佳时机;

/**
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 *
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 *
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 *
 * 示例 1:
 *
 * 输入：prices = [3,3,5,0,0,3,1,4]
 * 输出：6
 * 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 *      随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 *
 *
 * 动态规划
 *
 *
 * 由于我们最多可以完成两笔交易，因此在任意一天结束之后，我们会处于以下五个状态中的一种：
 *
 * 未进行过任何操作；
 *
 * 只进行过一次买操作；
 *
 * 进行了一次买操作和一次卖操作，即完成了一笔交易；
 *
 * 在完成了一笔交易的前提下，进行了第二次买操作；
 *
 * 完成了全部两笔交易。
 *
 * 由于第一个状态的利润显然为 0，因此我们可以不用将其记录。对于剩下的四个状态，我们分别将它们的最大利润记为buy1，sell1，buy2以及sell2。
 *
 * 对于buy1而言，在第 i 天我们可以不进行任何操作，保持不变，也可以在未进行任何操作的前提下以 prices[i] 的价格买入股票，那么 buy1的状态转移方程即为：
 *
 * buy1=max{buy1,−prices[i]}
 *
 * 同理
 *
 * sell1 = max(sell1, buy1 + prices[i]);
 * buy2 = max(buy2, sell1 - prices[i]);
 * sell2 = max(sell2, buy2 + prices[i]);
 *
 *
 * 那么对于边界条件，我们考虑第 i=0 天时的四个状态：buy1即为以prices[0] 的价格买入股票，因此buy1=−prices[0]；
 * sell1即为在同一天买入并且卖出，因此sell1=0；
 * buy2即为在同一天买入并且卖出后再以prices[0] 的价格买入股票，因此 buy2=−prices[0]；
 * 同理可得 sell2=0。将这四个状态作为边界条件，从 i=1 开始进行动态规划，即可得到答案。
 *
 * 在动态规划结束后，由于我们可以进行不超过两笔交易，因此最终的答案在 0，sell1，sell2中，且为三者中的最大值。
 * 然而，由于在边界条件中 sell1和 sell2的值已经为 0，并且在状态转移的过程中我们维护的是最大值，因此sell1和sell2最终一定大于等于 0。
 * 同时，如果最优的情况对应的是恰好一笔交易，那么它也会因为我们在转移时允许在同一天买入并且卖出这一宽松的条件，从 sell1转移至sell2，
 * 因此最终的答案为sell2
 */

public class Solution {

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int buy1 = -prices[0], sell1 = 0;
        int buy2 = -prices[0], sell2 = 0;
        for (int i = 1; i < n; ++i) {
            buy1 = Math.max(buy1, -prices[i]);
            sell1 = Math.max(sell1, buy1 + prices[i]);
            buy2 = Math.max(buy2, sell1 - prices[i]);
            sell2 = Math.max(sell2, buy2 + prices[i]);
        }
        return sell2;
    }

}
